//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrackableEntities.EF.Tests.Edmx
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;
    using TrackableEntities;
    using TrackableEntities.Client;
    
    [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace = "http://schemas.datacontract.org/2004/07/TrackableEntities.Models")]
    public partial class Product : ModelBase<Product>, IEquatable<Product>, ITrackable
    {
        
    	[DataMember]
    	public int product_id
    	{ 
    		get { return _product_id; }
    		set
    		{
    			if (Equals(value, _product_id)) return;
    			_product_id = value;
    			NotifyPropertyChanged(m => m.product_id);
    		}
    	}
    	private int _product_id;
        
    	[DataMember]
    	public string product_title
    	{ 
    		get { return _product_title; }
    		set
    		{
    			if (Equals(value, _product_title)) return;
    			_product_title = value;
    			NotifyPropertyChanged(m => m.product_title);
    		}
    	}
    	private string _product_title;
        
    	[DataMember]
    	public string product_description
    	{ 
    		get { return _product_description; }
    		set
    		{
    			if (Equals(value, _product_description)) return;
    			_product_description = value;
    			NotifyPropertyChanged(m => m.product_description);
    		}
    	}
    	private string _product_description;
    
    	[DataMember]
    	public ResourceKey description_resource
    	{
    		get { return _description_resource; }
    		set
    		{
    			if (Equals(value, _description_resource)) return;
    			_description_resource = value;
    			description_resourceChangeTracker = _description_resource == null ? null
    				: new ChangeTrackingCollection<ResourceKey> { _description_resource };
    			NotifyPropertyChanged(m => m.description_resource);
    		}
    	}
    	private ResourceKey _description_resource;
    	private ChangeTrackingCollection<ResourceKey> description_resourceChangeTracker { get; set; }
    
    	[DataMember]
    	public ResourceKey title_resource
    	{
    		get { return _title_resource; }
    		set
    		{
    			if (Equals(value, _title_resource)) return;
    			_title_resource = value;
    			title_resourceChangeTracker = _title_resource == null ? null
    				: new ChangeTrackingCollection<ResourceKey> { _title_resource };
    			NotifyPropertyChanged(m => m.title_resource);
    		}
    	}
    	private ResourceKey _title_resource;
    	private ChangeTrackingCollection<ResourceKey> title_resourceChangeTracker { get; set; }
    
        #region Change Tracking
    
    	[DataMember]
    	public TrackingState TrackingState { get; set; }
    
    	[DataMember]
    	public ICollection<string> ModifiedProperties { get; set; }
    
    	[JsonProperty, DataMember]
    	private Guid EntityIdentifier { get; set; }
    
    	#pragma warning disable 414
    
    	[JsonProperty, DataMember]
    	private Guid _entityIdentity = default(Guid);
    
    	#pragma warning restore 414
    
    	bool IEquatable<Product>.Equals(Product other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    
        #endregion
    }
}
